==========================
MAC 101: An Introduction
==========================

This is an introduction to the things that you should know about 
your new Mac.

In this section we discuss how to properly setup your Mac, how 
to SSH onto a remote computer, and more.

.. contents:: Table of Contents
    :local:

-------------
SSH
-------------

For most of the research being done in graduate school, one needs 
to access a remote computer that have more processors, more disk space 
than your computer. For this, you can **SSH** onto a remote 
computer via the terminal.

In order to do that, you first need to do the following in the terminal

* Create the new SSH folder

.. code::

    $ cd $HOME
    $ mkdir .ssh
    $ chmod 700 .ssh

* SSH Configuration file

.. code::

    $ cd ~/.ssh
    $ touch config
    $ chmod 600 config

* Authorized_keys file

.. code::

    $ cd ~/.ssh
    $ touch authorized_keys
    $ chmod 700 authorized_keys

* Connections Folder

.. code::

    cd ~/.ssh
    mkdir connections
    chmod 700 connections

* SSH-Keys Folder

.. code::

    cd ~/.ssh
    mkdir ssh_keys
    chmod 700 ssh_keys

* Public Keys Folder

.. code::

    cd ~/.ssh
    mkdir pub_keys
    chmod 700 pub_keys

At this point, your :code:`~/.ssh` folder should look like this:

.. code::

    $ ls -lah ~/.ssh

    drwx------    8 victor2  staff   256B Jan 21 18:37 ./
    drwxr-xr-x@ 161 victor2  staff   5.0K Jan 21 20:24 ../
    -rw-------@   9 victor2  staff   288B Jan 21 18:37 authorized_keys
    -rw-------@   1 victor2  staff   1.4K Jan 21 19:03 config
    drwx------    2 victor2  staff    64B Jan 22 16:37 connections/
    drwx------    2 victor2  staff    64B Jan 22 16:37 pub_keys/
    drwx------    2 victor2  staff    64B Jan 22 16:37 ssh_keys/

Now you can access a remote computer by logging in from the terminal:

.. code::

    ssh username@123456.server.io

The tedious thing about this is that it will prompt you for 
your password anytime that you want to access the remote server.

This can be solved by using **SSH keys**.


^^^^^^^^^^^^^
SSH-KEYS
^^^^^^^^^^^^^

Some servers are configured to accept encryption keys in addition 
to (or instead of) requiring a password. This can be more secure 
since the account cannot be compromised by someone guessing passwords!

SSH keys are comprised of a *public* and a *private* key. The public 
key can be given to anyone (hence the name). If you connect to a server 
that has your public key and you can provide your private key, it will 
let you in. (Consequently, if your private key is **stolen**, 
someone else can log into your account!)

In order to **generate SSH keys**, you need to run the following:

.. code:: bash

    $ cd ~/.ssh
    $ ssh-keygen -t rsa -b 4096
    $ Generating public/private rsa key pair.
    Enter file in which to save the key (/Users/calder/.ssh/id_rsa): id_rsa_4096
    Enter passphrase (empty for no passphrase):
    Enter same passphrase again:
    $ ls
    id_rsa_4096
    id_rsa_4096.pub
    $ chmod 600 id_rsa*
    $ mv id_rsa_4096 ssh_keys/
    $ mv id_rsa_4096.pub pub_keys

Now you can add your *SSH-Keys* by typing the following:

.. code::

    ssh-add -K ~/.ssh/ssh_keys/*

.. note::

    The argument `-K` in `ssh-add` for adding the key to your **Keychain**
    if you are on a MacOSX system. If not, just have the command 
    `ssh-add ~/.ssh/ssh_keys/*` to add all of the SSH-KEYS that you 
    have created.

From now on, you should add the keys and their respective *public*
keys to the `ssh_keys` and `pub_keys` folders, and then appy the 
`chmod 600 key` and `chmod 600 key.pub` command, replacing `key` with the 
name of the actual SSH-key.

.. note::

    If you enter a passpharase, you will need to type that password every time 
    you use the ssh keys (e.g. when connecting to a server). It's common to not 
    create a password, but know that if the private key is lost, anyone can use 
    them. (But they would have to know which server to connect to, which 
    "config" file will provide!)

^^^^^^^^^^^^^^^^^
SSH Config file
^^^^^^^^^^^^^^^^^




